
events {
  worker_connections 1024;
}

error_log /var/log/nginx-error.log;

http {
  resolver 127.0.0.11 ipv6=off;
  log_format  main  '$remote_addr - [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
  access_log /var/log/nginx-access.log main;

  lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/lua/src/?.lua";
  lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;";

  lua_shared_dict counters 1M;
  lua_shared_dict cats 1M;

  server {
    listen 8080;

    location /t2 {
      default_type 'text/plain';

      content_by_lua_block {
        ngx.say("Hello world!")
      }
    }

    location /t1 {
        default_type 'text/plain';

        content_by_lua_block {
          local key_prefix = "quota_limit"
          local math_floor = math.floor
          local ngx_now = ngx.now
          local ngx_null = ngx.null
          local tonumber = tonumber

          function print_ttl_of_keys(c) 
            local keys = c:get_keys(0)

            if keys then
              for key, value in pairs(keys) do
                -- ngx.say("keys: " .. key .. " " .. value)
                local ttl, err = c:ttl(value)
                if ttl then
                  ngx.say("ttl of " .. value .. ": " .. ttl)
                end
              end
            end
          end

          function get_current_rate (key, limit)
            local current_time = math_floor(ngx_now())
            local current_second = current_time % 60
            local current_minute = math_floor(current_time / 60) % 60
            local past_minute = (current_minute + 59) % 60

            -- create / use existing keys for current and (current - 1) minute
            local past_key = key_prefix .. "_{" .. key .. "}_" .. past_minute
            local current_key = key_prefix .. "_{" .. key .. "}_" .. current_minute

            local counter = require("sharedworker.counter")
            local c = counter.new("counters", 0.01)
  
            local past_min_counter, err = c:get(past_key)
            if err then
              ngx.log(ngx.ERR, err)
            end
  
            if not past_min_counter then
              past_min_counter = 0
            end

            local current_min_counter, err = c:get(current_key)
            if err then
              ngx.log(ngx.ERR, err)
            end

            if not current_min_counter then
              current_min_counter = 0
            end

            -- Inspired from https://blog.cloudflare.com/counting-things-a-lot-of-different-things/
            local current_rate = past_min_counter * ((60 - (current_time % 60)) / 60) + current_min_counter

            c:incr(current_key)
            c:expire(current_key, 90)

            print_ttl_of_keys(c)  
            c:flush_expired()

            return current_rate
          end

          local limit = 60
          local client = ngx.req.get_headers()["ClientId"]
          local rate = get_current_rate(client, limit)
          if rate > limit then
              ngx.say("Error: Rate limit exceeded for :" .. client)
          end
          ngx.say("current_rate_per_min for " .. client .. ": " .. rate)
         }
      }
    }
  }